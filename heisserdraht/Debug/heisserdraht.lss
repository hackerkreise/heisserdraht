
heisserdraht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000272  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000367  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001bf  00000000  00000000  00000727  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fa  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001eb  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039d  00000000  00000000  00000eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1f c0       	rjmp	.+62     	; 0x40 <__ctors_end>
   2:	fd c0       	rjmp	.+506    	; 0x1fe <__vector_1>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	e3 c0       	rjmp	.+454    	; 0x1d4 <__vector_6>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	c3 c0       	rjmp	.+390    	; 0x1a2 <__vector_13>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	64 c0       	rjmp	.+200    	; 0xf0 <__stack+0x11>
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__stack+0x9>
  2a:	66 c0       	rjmp	.+204    	; 0xf8 <__stack+0x19>
  2c:	3c c0       	rjmp	.+120    	; 0xa6 <seg_out+0x1c>
  2e:	3d c0       	rjmp	.+122    	; 0xaa <seg_out+0x20>
  30:	40 c0       	rjmp	.+128    	; 0xb2 <seg_out+0x28>
  32:	43 c0       	rjmp	.+134    	; 0xba <seg_out+0x30>
  34:	46 c0       	rjmp	.+140    	; 0xc2 <seg_out+0x38>
  36:	49 c0       	rjmp	.+146    	; 0xca <seg_out+0x40>
  38:	4c c0       	rjmp	.+152    	; 0xd2 <seg_out+0x48>
  3a:	4d c0       	rjmp	.+154    	; 0xd6 <seg_out+0x4c>
  3c:	50 c0       	rjmp	.+160    	; 0xde <seg_out+0x54>
  3e:	52 c0       	rjmp	.+164    	; 0xe4 <__stack+0x5>

00000040 <__ctors_end>:
  40:	11 24       	eor	r1, r1
  42:	1f be       	out	0x3f, r1	; 63
  44:	cf ed       	ldi	r28, 0xDF	; 223
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	e2 e7       	ldi	r30, 0x72	; 114
  50:	f2 e0       	ldi	r31, 0x02	; 2
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 36       	cpi	r26, 0x62	; 98
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	a2 e6       	ldi	r26, 0x62	; 98
  62:	b0 e0       	ldi	r27, 0x00	; 0
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	a4 36       	cpi	r26, 0x64	; 100
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	48 d0       	rcall	.+144    	; 0x100 <main>
  70:	fe c0       	rjmp	.+508    	; 0x26e <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <LED_out>:

}

void LED_out(uint8_t out)//Hier werden die LEDs aufgesetzt, ein Integer im TimerOverflow soll hochgezählt werden nach jeweils 4s wird eine weiter LED angeschaltet...
{
	PORTB &= ~_BV(PB3);
  74:	c3 98       	cbi	0x18, 3	; 24
	PORTA &= 0b00000111; //wenn wasted=31 sind alle LEDs an. 31 Sekunden Zeit fürs Spiel.
  76:	9b b3       	in	r25, 0x1b	; 27
  78:	97 70       	andi	r25, 0x07	; 7
  7a:	9b bb       	out	0x1b, r25	; 27
	PORTA |= out<<3;
  7c:	9b b3       	in	r25, 0x1b	; 27
  7e:	88 0f       	add	r24, r24
  80:	88 0f       	add	r24, r24
  82:	88 0f       	add	r24, r24
  84:	98 2b       	or	r25, r24
  86:	9b bb       	out	0x1b, r25	; 27
  88:	08 95       	ret

0000008a <seg_out>:
	} // while

}

void seg_out(uint8_t out)//Ansteuerung des 7 Segment Displays
{
  8a:	e8 2f       	mov	r30, r24
	PORTB |= _BV(PB3);
  8c:	c3 9a       	sbi	0x18, 3	; 24
	PORTA &= 0b00000100;
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	84 70       	andi	r24, 0x04	; 4
  92:	8b bb       	out	0x1b, r24	; 27

	switch(out)
  94:	8e 2f       	mov	r24, r30
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	8d 30       	cpi	r24, 0x0D	; 13
  9a:	91 05       	cpc	r25, r1
  9c:	80 f5       	brcc	.+96     	; 0xfe <__stack+0x1f>
  9e:	fc 01       	movw	r30, r24
  a0:	ed 5e       	subi	r30, 0xED	; 237
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	09 94       	ijmp
	{
		case   3:	PORTA |= 0b00000001; break;		//=0
  a6:	d8 9a       	sbi	0x1b, 0	; 27
  a8:	08 95       	ret
		case   4:	PORTA |= 0b10011111; break;		//=1
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	8f 69       	ori	r24, 0x9F	; 159
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	08 95       	ret
		case   5:	PORTA |= 0b00100010; break;		//=2
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	82 62       	ori	r24, 0x22	; 34
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret
		case   6:	PORTA |= 0b00001110; break;		//=3
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	8e 60       	ori	r24, 0x0E	; 14
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	08 95       	ret
		case   7:	PORTA |= 0b10011000; break;		//=4
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	88 69       	ori	r24, 0x98	; 152
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	08 95       	ret
		case   8:	PORTA |= 0b01001000; break;		//=5
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	88 64       	ori	r24, 0x48	; 72
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	08 95       	ret
		case   9:	PORTA |= 0b01000000; break;		//=6
  d2:	de 9a       	sbi	0x1b, 6	; 27
  d4:	08 95       	ret
		case   10:	PORTA |= 0b00011101; break;		//=7
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8d 61       	ori	r24, 0x1D	; 29
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	08 95       	ret
		case   11:	PORTA |= 0b00000000; break;		//=8
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	08 95       	ret
		case   12:	PORTA |= 0b00001000; break;		//=9
  e4:	db 9a       	sbi	0x1b, 3	; 27
  e6:	08 95       	ret
		case   1:	PORTA |= 0b01101010; break; // loose
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	8a 66       	ori	r24, 0x6A	; 106
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	08 95       	ret
		case   0:	PORTA |= 0b10010001; break; //pre start
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	81 69       	ori	r24, 0x91	; 145
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	08 95       	ret
		case   2:	PORTA |= 0b11000011; break; //win
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	83 6c       	ori	r24, 0xC3	; 195
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	08 95       	ret

00000100 <main>:
uint8_t timerem = 0;	//Zähler der an LED_out übergeben wird
uint8_t trys =3;		//Zähler für den Fehler Interrupt
uint8_t test= 0;		//Testen von INT0
inline void init_ports()
{
	DDRA |= 0b11111011;
 100:	8a b3       	in	r24, 0x1a	; 26
 102:	8b 6f       	ori	r24, 0xFB	; 251
 104:	8a bb       	out	0x1a, r24	; 26
	DDRB |= _BV(PB3) & ~_BV(PB6);
 106:	bb 9a       	sbi	0x17, 3	; 23
	PORTB6 == 1<<PORTB6;
	//PORTB4 == 1<<PORTB4;
	//Definition von INT0 und INT1
	GIMSK = 11000000;					// Enable INT0 und INT1
 108:	80 ec       	ldi	r24, 0xC0	; 192
 10a:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	85 bf       	out	0x35, r24	; 53
	MCUCR = 1<<ISC01 | 1>>ISC00;	//Trigger INT1 on falling Edge
 110:	85 bf       	out	0x35, r24	; 53
	
	sei();				//Enable Global Interrupt
 112:	78 94       	sei

int main ()
{
	init_ports();
	//Enable TIMER1
	TCCR0A |= _BV(TCW0);							//Timer auf 16Bit setzen avr Manual S.83
 114:	af 9a       	sbi	0x15, 7	; 21
	TCNT0H = (0x10000 - (8000000 / 256)) / 256;		//Zähler vorladen
 116:	85 e8       	ldi	r24, 0x85	; 133
 118:	84 bb       	out	0x14, r24	; 20
	TCNT0L = (0x10000 - (8000000 / 256)) % 256;
 11a:	8e ee       	ldi	r24, 0xEE	; 238
 11c:	82 bf       	out	0x32, r24	; 50
	
	TCCR0B |= _BV(CS02);							//Setzen des Prescalers auf 256 (S.84)
 11e:	83 b7       	in	r24, 0x33	; 51
 120:	84 60       	ori	r24, 0x04	; 4
 122:	83 bf       	out	0x33, r24	; 51

	TIMSK |= _BV(TOIE0);							//Overflowbit setzen
 124:	89 b7       	in	r24, 0x39	; 57
 126:	82 60       	ori	r24, 0x02	; 2
 128:	89 bf       	out	0x39, r24	; 57
}



int main ()
{
 12a:	0f 2e       	mov	r0, r31
 12c:	f5 e6       	ldi	r31, 0x65	; 101
 12e:	ef 2e       	mov	r14, r31
 130:	f0 2d       	mov	r31, r0
 132:	0f 2e       	mov	r0, r31
 134:	f4 e6       	ldi	r31, 0x64	; 100
 136:	ff 2e       	mov	r15, r31
 138:	f0 2d       	mov	r31, r0
					wasted = 31;
					trys = 1; //Nach Ablauf der Zeit Wechsel in den Case loose(=10) erzwingen
				}
				if (trys >9)
				{
					trys = 1; //Nachdem zehnten Versuch soll das Board in den loose state gehen.
 13a:	d1 e0       	ldi	r29, 0x01	; 1
			
			for (uint8_t j = 0; j<100; j++)
			{
				if (wasted >= 32) //Zeit die für das Spiel vorhanden ist festlegen.
				{
					wasted = 31;
 13c:	1f e1       	ldi	r17, 0x1F	; 31
		
		

	while(1)
	{	
		if (wasted % 4 == 0) //Dafür sorgen das nur Werte durch 4 Teilbar sind an LED_out() übergeben werden
 13e:	80 91 63 00 	lds	r24, 0x0063
 142:	98 2f       	mov	r25, r24
 144:	93 70       	andi	r25, 0x03	; 3
 146:	59 f5       	brne	.+86     	; 0x19e <main+0x9e>
		{
			timerem = wasted;
 148:	80 93 62 00 	sts	0x0062, r24
 14c:	28 c0       	rjmp	.+80     	; 0x19e <main+0x9e>
		for (uint8_t i = 0; i<=100; i++)
		{
			
			for (uint8_t j = 0; j<100; j++)
			{
				if (wasted >= 32) //Zeit die für das Spiel vorhanden ist festlegen.
 14e:	80 91 63 00 	lds	r24, 0x0063
 152:	80 32       	cpi	r24, 0x20	; 32
 154:	28 f0       	brcs	.+10     	; 0x160 <main+0x60>
				{
					wasted = 31;
 156:	10 93 63 00 	sts	0x0063, r17
					trys = 1; //Nach Ablauf der Zeit Wechsel in den Case loose(=10) erzwingen
 15a:	d0 93 60 00 	sts	0x0060, r29
 15e:	06 c0       	rjmp	.+12     	; 0x16c <main+0x6c>
				}
				if (trys >9)
 160:	80 91 60 00 	lds	r24, 0x0060
 164:	8a 30       	cpi	r24, 0x0A	; 10
 166:	10 f0       	brcs	.+4      	; 0x16c <main+0x6c>
				{
					trys = 1; //Nachdem zehnten Versuch soll das Board in den loose state gehen.
 168:	d0 93 60 00 	sts	0x0060, r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	87 e8       	ldi	r24, 0x87	; 135
 16e:	93 e1       	ldi	r25, 0x13	; 19
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <main+0x70>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x76>
 176:	00 00       	nop
				}
				_delay_ms(20);
				LED_out(wasted);
 178:	80 91 63 00 	lds	r24, 0x0063
 17c:	7b df       	rcall	.-266    	; 0x74 <LED_out>
 17e:	87 e8       	ldi	r24, 0x87	; 135
 180:	93 e1       	ldi	r25, 0x13	; 19
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <main+0x82>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x88>
 188:	00 00       	nop

				_delay_ms(20);
				seg_out(trys);
 18a:	80 91 60 00 	lds	r24, 0x0060
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	7c df       	rcall	.-264    	; 0x8a <seg_out>
 192:	c1 50       	subi	r28, 0x01	; 1
		}
		
		for (uint8_t i = 0; i<=100; i++)
		{
			
			for (uint8_t j = 0; j<100; j++)
 194:	e1 f6       	brne	.-72     	; 0x14e <main+0x4e>
 196:	01 50       	subi	r16, 0x01	; 1
		if (wasted % 4 == 0) //Dafür sorgen das nur Werte durch 4 Teilbar sind an LED_out() übergeben werden
		{
			timerem = wasted;
		}
		
		for (uint8_t i = 0; i<=100; i++)
 198:	91 f2       	breq	.-92     	; 0x13e <main+0x3e>
}



int main ()
{
 19a:	cf 2d       	mov	r28, r15
 19c:	d8 cf       	rjmp	.-80     	; 0x14e <main+0x4e>
 19e:	0e 2d       	mov	r16, r14
 1a0:	fc cf       	rjmp	.-8      	; 0x19a <main+0x9a>

000001a2 <__vector_13>:
	}

}


ISR(INT1_vect){// Interrupt für Berührung der Drähte.
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	87 ea       	ldi	r24, 0xA7	; 167
 1b2:	91 e6       	ldi	r25, 0x61	; 97
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <__vector_13+0x12>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <__vector_13+0x18>
 1ba:	00 00       	nop
	_delay_ms(100);
	trys++;
 1bc:	80 91 60 00 	lds	r24, 0x0060
 1c0:	8f 5f       	subi	r24, 0xFF	; 255
 1c2:	80 93 60 00 	sts	0x0060, r24
	
}
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_6>:


ISR(TIMER0_OVF_vect){// Setzt den Timer zurück nach jeder Sekunde und zählt die vergangene Zeit in wasted
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
	TCNT0H = (0x10000 - (8000000 / 256)+1) / 256;		//Zähler vorladen
 1e0:	85 e8       	ldi	r24, 0x85	; 133
 1e2:	84 bb       	out	0x14, r24	; 20
	TCNT0L = (0x10000 - (8000000 / 256)+1) % 256;
 1e4:	8f ee       	ldi	r24, 0xEF	; 239
 1e6:	82 bf       	out	0x32, r24	; 50
	wasted++; 
 1e8:	80 91 63 00 	lds	r24, 0x0063
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 63 00 	sts	0x0063, r24
}
 1f2:	8f 91       	pop	r24
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__vector_1>:


ISR(INT0_vect){ //Interrupt für den BUtton
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
 220:	87 ea       	ldi	r24, 0xA7	; 167
 222:	91 e6       	ldi	r25, 0x61	; 97
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <__vector_1+0x26>
 228:	00 c0       	rjmp	.+0      	; 0x22a <__vector_1+0x2c>
 22a:	00 00       	nop
	_delay_ms(100);
	seg_out(0); //Ausgabe des Startsignals
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	2d df       	rcall	.-422    	; 0x8a <seg_out>
 230:	9f e7       	ldi	r25, 0x7F	; 127
 232:	24 e8       	ldi	r18, 0x84	; 132
 234:	8e e1       	ldi	r24, 0x1E	; 30
 236:	91 50       	subi	r25, 0x01	; 1
 238:	20 40       	sbci	r18, 0x00	; 0
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <__vector_1+0x38>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <__vector_1+0x42>
 240:	00 00       	nop
	_delay_ms(10000); //Zeit zum reset geben
	trys = 3;
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	80 93 60 00 	sts	0x0060, r24
	wasted = 0;
 248:	10 92 63 00 	sts	0x0063, r1
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
